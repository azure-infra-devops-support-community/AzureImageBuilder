trigger: none

schedules:
  - cron: "0 8 14 * *"
    displayName: Monthly build
    branches:
     include:
     - main
    always: true

parameters:
- name: mode
  type: string
  default: stable
  values:
    - beta
    - stable
- name: image
  type: string
  default: windows2019
  values:
    - win-2019
    - ubuntu-pro-2204

name: $(Year:yyyy).$(Month).$(Rev:r)

variables:
  - name: imageTemplateName
    value: sbs-uks-$(environment)-${{ parameters.image }}-it
  - name: fileToRun
    value: images/${{ parameters.image }}.bicep
  - name: version
    value: '$(Build.BuildNumber)'

  - ${{ if eq(parameters.mode, 'beta') }}:
    - name: environment
      value: np01
    - name: agentPool
      value: dsha
    - name: subscriptionId
      value: de991dcf-6e08-4849-8e37-d1494a815a94
    - name: serviceConnection
      value: bicepaibspn

  - ${{ if eq(parameters.mode, 'stable') }}:
    - name: environment
      value: pr01
    - name: agentPool
      value: dsha
    - name: subscriptionId
      value: de991dcf-6e08-4849-8e37-d1494a815a94
    - name: serviceConnection
      value: bicepaibspn

stages:
  - stage: InstallAzureCLI
    displayName: 'Install Azure CLI'
    pool: $(agentPool)
    jobs:
      - job: InstallCLI
        steps:
          - script: |
              echo "Installing Azure CLI..."
              Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile AzureCLI.msi
              Start-Process msiexec.exe -ArgumentList '/I AzureCLI.msi /quiet' -Wait
              echo "Azure CLI installed successfully"
              az --version
            displayName: 'Install Azure CLI on Windows'

  - stage: Build
    displayName: 'Build Bicep'
    dependsOn: InstallAzureCLI
    pool: $(agentPool)
    jobs:
      - job: BuildBicep
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'bicepaibspn'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: '$ProgressPreference = ''SilentlyContinue''; Invoke-WebRequest -Uri https://azcliprod.blob.core.windows.net/msi/azure-cli-2.51.0.msi -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList ''/I AzureCLI.msi /quiet''; Remove-Item .\AzureCLI.msi'
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(serviceConnection)
              scriptType: "ps"
              scriptLocation: "inlineScript"
              inlineScript: |
                az bicep build --file $(fileToRun)

  - stage: Clean
    displayName: 'Cleanup'
    dependsOn: Build
    pool: $(agentPool)
    jobs:
      - job: Clean
        steps:
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: $(serviceConnection)
              scriptType: "InlineScript"
              azurePowerShellVersion: LatestVersion
              Inline: |
                Install-Module -Name Az.ImageBuilder -Repository PSGallery -AllowClobber -Force
                Import-Module -Name Az.ImageBuilder
                $subnet = 'imagebuilder-sn'
                $net = @{
                    Name = 'sbs-uks-${{ variables.environment }}-cmnsvc-lan-vnet'
                    ResourceGroupName = 'sbs-uks-${{ variables.environment }}-cmnsvc-network-rg'
                }
                $vnet = Get-AzVirtualNetwork @net
                ($vnet | Select -ExpandProperty subnets | Where-Object {$_.Name -eq $subnet}).privateLinkServiceNetworkPolicies = "Disabled"
                $vnet | Set-AzVirtualNetwork
                Remove-AzImageBuilderTemplate -Name '${{ variables.imageTemplateName }}' -ResourceGroupName 'sbs-uks-${{ variables.environment }}-cmnsvc-gallery-rg'

  - stage: Deploy
    displayName: 'Deploy Bicep'
    dependsOn: Clean
    pool: $(agentPool)
    jobs:
      - job: DeployBicep
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(serviceConnection)
              scriptType: "ps"
              scriptLocation: "inlineScript"
              inlineScript: |
                az deployment group create --name Image_$(Build.BuildId) --resource-group 'sbs-uks-${{ variables.environment }}-cmnsvc-gallery-rg' --template-file $(fileToRun) --parameters @images/placeholder.json version=$(version) environment=$(environment) name=${{ parameters.image }}

  - stage: BuildImage
    displayName: 'Build Image'
    dependsOn: Deploy
    pool: $(agentPool)
    jobs:
      - job: BuildImage
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(serviceConnection)
              scriptType: "ps"
              scriptLocation: "inlineScript"
              inlineScript: |
                az image builder run --name ${{ variables.imageTemplateName }} --resource-group 'sbs-uks-${{ variables.environment }}-cmnsvc-gallery-rg' --no-wait
                az image builder wait --name ${{ variables.imageTemplateName }} --resource-group 'sbs-uks-${{ variables.environment }}-cmnsvc-gallery-rg' --custom "lastRunStatus.runState!='Running'"
                if (($lastRunStatus = az image builder show -n ${{ variables.imageTemplateName }} --resource-group 'sbs-uks-${{ variables.environment }}-cmnsvc-gallery-rg' --query "lastRunStatus.runState") -eq "Failed") {
                  exit 1
                }
                az image builder show --name ${{ variables.imageTemplateName }} --resource-group 'sbs-uks-${{ variables.environment }}-cmnsvc-gallery-rg'




# trigger: none

# schedules:
#   - cron: "0 8 14 * *"
#     displayName: Monthly build
#     branches:
#      include:
#      - main
#     always: true

# parameters:
# - name: mode
#   type: string
#   default: stable
#   values:
#     - beta
#     - stable
# - name: image
#   type: string
#   default: windows2019
#   values:
#     - win-2019
#     - ubuntu-pro-2204

# name: $(Year:yyyy).$(Month).$(Rev:r)

# variables:
#   - name: imageTemplateName
#     value: sbs-uks-$(environment)-${{ parameters.image }}-it
#   - name: fileToRun
#     value: images/${{ parameters.image }}.bicep
#   - name: version
#     value: '$(Build.BuildNumber)'

#   - ${{ if eq(parameters.mode, 'beta') }}:
#     - name: environment
#       value: np01
#     - name: agentPool
#       value: dsha
#     - name: subscriptionId
#       value: de991dcf-6e08-4849-8e37-d1494a815a94
#     - name: serviceConnection
#       value: bicepaibspn

#   - ${{ if eq(parameters.mode, 'stable') }}:
#     - name: environment
#       value: pr01
#     - name: agentPool
#       value: dsha
#     - name: subscriptionId
#       value: de991dcf-6e08-4849-8e37-d1494a815a94
#     - name: serviceConnection
#       value: bicepaibspn

# stages:
#   - stage: Build
#     displayName: 'Build Bicep'
#     pool: $(agentPool)
#     jobs:
#       - job: BuildBicep
#         steps:
#           - task: AzureCLI@2
#             inputs:
#               azureSubscription: $(serviceConnection)
#               scriptType: "ps"
#               scriptLocation: "inlineScript"
#               inlineScript: |
#                 az bicep build --file $(fileToRun)

#   - stage: Clean
#     displayName: 'Cleanup'
#     dependsOn: Build
#     pool: $(agentPool)
#     jobs:
#       - job: Clean
#         steps:
#           - task: AzurePowerShell@5
#             inputs:
#               azureSubscription: $(serviceConnection)
#               scriptType: "InlineScript"
#               azurePowerShellVersion: LatestVersion
#               Inline: |
#                 Install-Module -Name Az.ImageBuilder -Repository PSGallery -AllowClobber -Force
#                 Import-Module -Name Az.ImageBuilder
#                 $subnet = 'imagebuilder-sn'
#                 $net = @{
#                     Name = 'sbs-uks-${{ variables.environment }}-cmnsvc-lan-vnet'
#                     ResourceGroupName = 'sbs-uks-${{ variables.environment }}-cmnsvc-network-rg'
#                 }
#                 $vnet = Get-AzVirtualNetwork @net
#                 ($vnet | Select -ExpandProperty subnets | Where-Object {$_.Name -eq $subnet}).privateLinkServiceNetworkPolicies = "Disabled"
#                 $vnet | Set-AzVirtualNetwork
#                 Remove-AzImageBuilderTemplate -Name '${{ variables.imageTemplateName }}' -ResourceGroupName 'sbs-uks-${{ variables.environment }}-cmnsvc-gallery-rg'

#   - stage: Deploy
#     displayName: 'Deploy Bicep'
#     dependsOn: Clean
#     pool: $(agentPool)
#     jobs:
#       - job: DeployBicep
#         steps:
#           - task: AzureCLI@2
#             inputs:
#               azureSubscription: $(serviceConnection)
#               scriptType: "ps"
#               scriptLocation: "inlineScript"
#               inlineScript: |
#                 az deployment group create --name Image_$(Build.BuildId) --resource-group 'sbs-uks-${{ variables.environment }}-cmnsvc-gallery-rg' --template-file $(fileToRun) --parameters @images/placeholder.json version=$(version) environment=$(environment) name=${{ parameters.image }}

#   - stage: BuildImage
#     displayName: 'Build Image'
#     dependsOn: Deploy
#     pool: $(agentPool)
#     jobs:
#       - job: BuildImage
#         steps:
#           - task: AzureCLI@2
#             inputs:
#               azureSubscription: $(serviceConnection)
#               scriptType: "ps"
#               scriptLocation: "inlineScript"
#               inlineScript: |
#                 az image builder run --name ${{ variables.imageTemplateName }} --resource-group 'sbs-uks-${{ variables.environment }}-cmnsvc-gallery-rg' --no-wait
#                 az image builder wait --name ${{ variables.imageTemplateName }} --resource-group 'sbs-uks-${{ variables.environment }}-cmnsvc-gallery-rg' --custom "lastRunStatus.runState!='Running'"
#                 if (($lastRunStatus = az image builder show -n ${{ variables.imageTemplateName }} --resource-group 'sbs-uks-${{ variables.environment }}-cmnsvc-gallery-rg' --query "lastRunStatus.runState") -eq "Failed") {
#                   exit 1
#                 }
#                 az image builder show --name ${{ variables.imageTemplateName }} --resource-group 'sbs-uks-${{ variables.environment }}-cmnsvc-gallery-rg'
